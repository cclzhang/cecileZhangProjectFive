{"version":3,"sources":["firebase.js","components/List.js","components/Button.js","components/AutoComplete.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","List","removeHandler","restaurantKey","database","ref","props","refKey","child","remove","infoBox","name","url","type","className","href","classDecider","state","visibility","editClick","e","preventDefault","setState","this","listType","map","restaurant","index","data","id","htmlFor","onClick","icon","faPencilAlt","key","faTrashAlt","Component","Button","buttonHandler","dbRef","axios","method","responseType","params","apikey","q","userInput","count","lat","lon","radius","then","response","array","restaurants","cuisines","push","catch","button","console","log","replace","btnDetails","AutoComplete","class","show","item","handler","location","address","Form","handleChange","target","value","autoComplete","selectedHandler","handleKeyPress","keyPressed","popup","onSubmit","submitHandler","onChange","onKeyPress","tabIndex","App","favourites","wantToTry","favDbRef","wantDbRef","on","favFromDb","val","favToBeSet","restaurantInfo","wantFromDb","wantToBeSet","want","wantButtonHandler","fav","favButtonHandler","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bed2cdfb.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n\r\n  // Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD4Ovgdxhj-ZdoIxf2P3PW8etBnRpMLnsc\",\r\n    authDomain: \"ccl-restaurant-tracker.firebaseapp.com\",\r\n    databaseURL: \"https://ccl-restaurant-tracker.firebaseio.com\",\r\n    projectId: \"ccl-restaurant-tracker\",\r\n    storageBucket: \"ccl-restaurant-tracker.appspot.com\",\r\n    messagingSenderId: \"221018574164\",\r\n    appId: \"1:221018574164:web:f6bab51aab45495413ccc1\",\r\n    measurementId: \"G-5572PJX23Z\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, {Component} from 'react';\r\nimport firebase from '../firebase';\r\nimport { faTrashAlt, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport '../css/List.css'\r\n\r\nclass List extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            visibility: false,\r\n        }\r\n    }\r\n    removeHandler = (restaurantKey) => {\r\n        const dbRef = firebase.database().ref(this.props.refKey);\r\n        dbRef.child(restaurantKey).remove();\r\n    }\r\n\r\n    infoBox = (name, url, type) =>{\r\n        return (\r\n            <div className=\"infoBox\">\r\n                <h4><a href={url}>{name}</a></h4>\r\n                <p>-- {type}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    classDecider = ()=>{\r\n        if (this.state.visibility) {\r\n            return \"editInput\"\r\n        } else {\r\n            return \"editInput hidden\"\r\n        }\r\n    }\r\n\r\n    editClick = (e)=>{\r\n        e.preventDefault();\r\n        this.setState({\r\n            visibility: !this.state.visibility,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            this.props.listType.map((restaurant, index) => {\r\n                return(\r\n                    <li key={restaurant.key} >\r\n                        {restaurant.name ? \r\n                            this.infoBox(restaurant.name, restaurant.url, restaurant.type) \r\n                            : <h4 className=\"infoBox\">{restaurant.data}</h4>}\r\n                        <div className={this.classDecider()}>\r\n                            <input type=\"search\" id=\"edit\" />\r\n                            <label htmlFor=\"edit\">type another restaurant</label>\r\n                            <button>edit</button>\r\n                        </div>\r\n                        <div className=\"buttonBox\">\r\n                            <button id={index} onClick={e=> this.editClick(e)}><FontAwesomeIcon icon={faPencilAlt} /></button>\r\n                            <button onClick={() => {this.removeHandler(restaurant.key) }}><FontAwesomeIcon icon={faTrashAlt} /></button>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport axios from 'axios';\r\nimport '../css/Button.css'\r\n\r\nclass Button extends Component {\r\n    buttonHandler = (e) => {\r\n        e.preventDefault();\r\n        const dbRef = firebase.database().ref(this.props.refKey);\r\n        axios({\r\n            url: 'https://developers.zomato.com/api/v2.1/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                apikey: '3a17fa134b021257dcadfb7e21140fdb',\r\n                // sort: 'rating',\r\n                q: this.props.userInput,\r\n                count: 3,\r\n                lat: 43.653908,\r\n                lon: -79.384293,\r\n                radius: 1000,\r\n            }\r\n        }).then((response) => {\r\n            const array = {\r\n                name: response.data.restaurants[0].restaurant.name,\r\n                type: response.data.restaurants[0].restaurant.cuisines,\r\n                url: response.data.restaurants[0].restaurant.url,\r\n            }\r\n            dbRef.push(array);\r\n            this.setState({\r\n                userInput: \"\",\r\n            })\r\n        }).catch(()=>{\r\n            dbRef.push(this.props.userInput);\r\n            this.setState({\r\n                userInput: \"\",\r\n            })\r\n        })\r\n    }\r\n\r\n    button = (e) =>{\r\n        e.preventDefault();\r\n        console.log('error')\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            !(this.props.userInput.replace(/\\s/g, '')) ? <button onClick={this.button}>{this.props.btnDetails}</button>\r\n                : <button onClick={this.buttonHandler}>{this.props.btnDetails}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport '../css/AutoComplete.css';\r\n\r\nclass AutoComplete extends Component {\r\n    render(){\r\n        return(\r\n            <section className={this.props.class}>\r\n            {this.props.show.map((item) => {\r\n                return (\r\n                    <div\r\n                        className=\"detailsBin\"\r\n                        key={item.restaurant.id}\r\n                        onClick={e => this.props.handler(e, item.restaurant.name)}\r\n                    >\r\n                        <h4>{item.restaurant.name}</h4>\r\n                        <p>-- {item.restaurant.location.address}</p>\r\n                    </div>           \r\n                )\r\n            })}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AutoComplete;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Button from './Button'\r\nimport AutoComplete from './AutoComplete'\r\nimport '../css/Form.css'\r\n\r\nclass Form extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            userInput: \"\",\r\n            restaurants: [],\r\n            autoComplete: props.popup,\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        if (!(e.target.value.replace(/\\s/g, ''))) {\r\n            this.setState({\r\n                autoComplete: false,\r\n                userInput: e.target.value,\r\n            })\r\n        } else {\r\n            axios({\r\n                url: 'https://developers.zomato.com/api/v2.1/search',\r\n                method: 'GET',\r\n                responseType: 'json',\r\n                params: {\r\n                    apikey: '3a17fa134b021257dcadfb7e21140fdb',\r\n                  // sort: 'rating',\r\n                    q: e.target.value,\r\n                    count: 5,\r\n                    lat: 43.653908,\r\n                    lon: -79.384293,\r\n                    radius: 1000,\r\n                }\r\n            }).then(response=>{\r\n                this.setState({                \r\n                    autoComplete: true,\r\n                    restaurants: response.data.restaurants,\r\n                })\r\n            }).catch(() => {\r\n                console.log(\"we could not find the restaurant you were looking for\")\r\n            })\r\n            this.setState({\r\n                userInput: e.target.value,\r\n            })\r\n        }\r\n    }\r\n\r\n    selectedHandler = (e, item) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            userInput: item,\r\n            autoComplete: !this.state.autoComplete,\r\n        })\r\n    }\r\n    handleKeyPress = (keyPressed) => {\r\n        if (keyPressed.key === 'Enter') {\r\n            this.setState({\r\n                autoComplete: !this.state.autoComplete,\r\n            })\r\n        }\r\n    }\r\n\r\n    submitHandler(e) {\r\n        e.preventDefault();\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.submitHandler} className=\"wrapper\">\r\n                <input\r\n                    type=\"search\"\r\n                    name=\"restaurantChoice\"\r\n                    id=\"restaurantChoice\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.userInput}\r\n                    onKeyPress={this.handleKeyPress}\r\n                />\r\n                {this.state.autoComplete \r\n                    ? <AutoComplete \r\n                        class=\"autoComplete\" \r\n                        show={this.state.restaurants} \r\n                        handler={this.selectedHandler} \r\n                    /> \r\n                    : <AutoComplete \r\n                        class=\"invisible\" \r\n                        show={this.state.restaurants} \r\n                        handler={this.selectedHandler} \r\n                    />\r\n                }\r\n                <label htmlFor=\"restaurantChoice\">type in the restaurant list</label>\r\n                <button className=\"invisible\" type=\"submit\" tabIndex=\"-1\"></button>\r\n                <div className=\"buttonDetails\">\r\n                    <Button refKey=\"wantList\" userInput={this.state.userInput} btnDetails=\"+ to wants\"/>\r\n                    <Button refKey=\"favList\" userInput={this.state.userInput} btnDetails=\"+ to favourites\"/>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport List from './components/List';\r\nimport Form from './components/Form';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      favourites: [],\r\n      wantToTry: [],\r\n      autoComplete: false,\r\n      userInput: '',\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const favDbRef = firebase.database().ref(\"favList\");\r\n    const wantDbRef = firebase.database().ref(\"wantList\");\r\n    favDbRef.on('value', (response) => {\r\n      const favFromDb = response.val();\r\n      const favToBeSet = [];\r\n      for (let key in favFromDb) {\r\n        const restaurantInfo = {\r\n          key: key,\r\n          name: favFromDb[key].name,\r\n          url: favFromDb[key].url,\r\n          type: favFromDb[key].type,\r\n          data: favFromDb[key],\r\n        }\r\n        favToBeSet.push(restaurantInfo);\r\n      }\r\n      this.setState({\r\n        favourites: favToBeSet,\r\n      })\r\n    });\r\n    wantDbRef.on('value', (response) => {\r\n      const wantFromDb = response.val();\r\n      const wantToBeSet = [];\r\n      for (let key in wantFromDb) {\r\n        const restaurantInfo = {\r\n          key: key,\r\n          name: wantFromDb[key].name,\r\n          url: wantFromDb[key].url,\r\n          type: wantFromDb[key].type,\r\n          data: wantFromDb[key],\r\n        }\r\n        wantToBeSet.push(restaurantInfo);\r\n      }\r\n      this.setState({\r\n        wantToTry: wantToBeSet,\r\n      })\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>restaurant tracker</h1>\r\n        <Form want={this.wantButtonHandler} fav={this.favButtonHandler} popup={this.state.autoComplete} />\r\n        <section className=\"allLists wrapper\">\r\n          <section className=\"list wantToTry\">\r\n            <h2>want to try</h2>\r\n            <ul>\r\n              <List listType={this.state.wantToTry} refKey=\"wantList\"/>\r\n            </ul>\r\n          </section>\r\n          <section className=\"list favourites\">\r\n            <h2>favourites</h2>\r\n            <ul>\r\n              <List listType={this.state.favourites} refKey=\"favList\"/>\r\n            </ul>\r\n          </section>\r\n        </section>\r\n        <footer>&copy; <a href=\"http://cecilezhang.com/\">Cecile Zhang</a> 2020 </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './css/fontFamily.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}